#!/usr/bin/perl
use strict;
use warnings;
no warnings 'uninitialized';

# get file names
(my $csvfile, my $headerfile) = @ARGV;

my @langs = ("english","french","german","italian","spanish");
my (%french, %german, %italian, %spanish);
my @english_keys;
my $key;
my $tempfile = "$headerfile.bak";

# open and parse csv file
open (my $fh_csv,'<', $csvfile) or die "Couldn't read '$csvfile': $!";
while ( <$fh_csv> )
{
    # split $_ by commas
    my @fields = split /,/;

    # store each comma-separated string in correct language array
    if (($. != 1) and ($#fields+1 == 5))
    {
        push(@english_keys, $fields[0]);
        $french{ $fields[0] } = $fields[1]; #french is second column
        $german{ $fields[0] } = $fields[2]; #german is third column
        $italian{ $fields[0] } = $fields[3]; #italian is fourth column

        chomp $fields[4]; #remove trailing newline
        $spanish{ $fields[0] } = $fields[4]; #spanish is fifth column
    }
}

close $fh_csv or die "couldn't close '$csvfile' : $!"; #close file


# open and parse header file and write to tempfile
open (my $fh_header, '<', $headerfile) or die "Couldn't read '$headerfile': $!";
open (my $fh_tempfile, '>', $tempfile) or die "Couldn't create '$tempfile': $!";

while ( <$fh_header> )
{
    # if within bounds of string array declaration, replace
    if ( /^static const sp2_string_struct_t string_array\[NUM_STRINGS\] =/.../end string_array/ )
    {
        #get english translation hash key
        /$langs[0]/i and /"(.*?)"/i and $key="$1";

        # Check that translations exist
        #$french{$key} or die "ERROR: no French translation for '$key': $!";
        #$german{$key} or die "ERROR: no German translation for '$key': $!";
        #$italian{$key} or die "ERROR: no Italian translation for '$key': $!";
        #$spanish{$key} or die "ERROR: no Spanish translation for '$key': $!";

        # replace each language string with new hash value  by replacing string between
        # quotation marks with $<language>{$key} on lines that contain "<language>"
        # /$langs[1]/i and s/"(.*?)"/"$french{$key}"/g;
        # /$langs[2]/i and s/"(.*?)"/"$german{$key}"/g;
        # /$langs[3]/i and s/"(.*?)"/"$italian{$key}"/g;
        #/$langs[4]/i and s/"(.*?)"/"$spanish{$key}"/g;
        my $poop = "poop"; /$langs[4]/i and s/"(.*?)"/"$poop"/g;
    }
    print $fh_tempfile "$_"
        or die "can't write $tempfile: $!";
}
close $fh_header, $headerfile or die "Couldn't close '$headerfile': $!";
close $fh_tempfile, $tempfile or die "Couldn't close '$tempfile': $!";

